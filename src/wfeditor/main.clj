(ns wfeditor.main
  ;; putting the import statement in the ns form is the preferred way
  ;; of importing Java classes in Clojure (see http://pragprog.com/magazines/2010-11/getting-clojure)
  (:import
  org.eclipse.jface.window.ApplicationWindow
  org.eclipse.swt.SWT
  org.eclipse.swt.layout.FillLayout
  (org.eclipse.swt.widgets Display Shell Label Button)))

(defmacro triple-do [form]
  (list 'do form form form))

(defmacro new-widget [widget-class parent style]
  `(do (new ~widget-class ~parent ~style)))

(defmacro create-widgets-with-names [parent widget-class style names]
  `(dorun (map #(.setText (new ~widget-class ~parent ~style) %1) ~names))
  )

(defn create-buttons-with-names [parent  style names]
  (dorun (map #(.setText (Button. parent style) %1) names))
  )

;; JFace way of creating a window is to subclass ApplicationWindow and
;; override createContents
;; This is the Clojure way of "subclassing", i.e., extending a class
;; via the proxy macro.  This function just returns the instance of
;; the anonymous class generated by proxy
(defn app-win-proxy []
  (proxy [ApplicationWindow]
      [nil]  ;; calling the ApplicationWindow constructor
    ;; note, should not implement any subclass constructor, as
    ;; explained in
    ;; http://pragprog.com/magazines/2010-11/getting-clojure
    ;; Instead, any code that would go in the subclass construtor
    ;; should be applied to the instance of the extended class
    ;; returned by proxy
    (createContents [parent]
      (let [label2 (Label. parent  SWT/CENTER)
            layout (FillLayout. SWT/VERTICAL)
            ;; b1 (Button. parent SWT/PUSH)
            ;; b2 (Button. parent SWT/PUSH)
            ;; b3 (Button. parent SWT/PUSH)
            label1 (new Label parent SWT/LEFT)
            ;; rad-buts (create-buttons-with-names parent SWT/RADIO ["Radio 1" "Radio 2" "Radio 3"])
            ;; toggle-buts (create-widgets-with-names parent Button SWT/TOGGLE ["Tog 1" "Tog 2" "Tog 3"])
            ]
        (do
          (create-widgets-with-names parent Button SWT/PUSH ["one" "two" "three"])
          (create-widgets-with-names parent Button SWT/RADIO ["Radio 1" "Radio 2" "Radio 3"])
          (create-widgets-with-names parent Button SWT/TOGGLE ["Tog 1" "Tog 2" "Tog 3"]))
        (doto label2
          (.setText "Hello, World")
          (.setBounds (.getClientArea parent)))
        (doto label1
          (.setText "hw 2.1"))
        (do
          (.setLayout parent layout)
          ;; (dorun (map #(.setText %1 %2) [b1 b2 b3] ["one" "two" "three"]))
          ;; (triple-do (Button. parent SWT/CHECK))
          (create-widgets-with-names parent Button SWT/CHECK [ "Check one" "...two" "...three"])
          ;; (new-widget Button parent SWT/TOGGLE)
          )))))

;; The JFace idiomatic way of displaying a window.  As it seems, using
;; the "plain SWT" idiom for displaying a window doesn't work for
;; situations like a simple Label attached to the Shell, in the
;; following way: no Label widgets are painted on the Shell until the
;; user resizes the Shell.  The JFace style of doing things works
;; properly as expected.
;; If there is any code that should've gone in what would've been a
;; subclass constructor, that should go somewhere here, where the
;; instance is actually being returned and manipulated
(let [app-win (app-win-proxy)]
  (. app-win setBlockOnOpen true)
  (. app-win open)
  (.dispose (. Display getCurrent))
  )
